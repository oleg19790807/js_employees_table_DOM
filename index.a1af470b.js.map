{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["/* eslint-disable no-param-reassign */ /* eslint-disable no-shadow */ \"use strict\";\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var saveCellChanges = function saveCellChanges(cell, newValue, originalValue) {\n        if (newValue.trim() === \"\") newValue = originalValue;\n        cell.innerText = newValue;\n        editingCell = null;\n    };\n    // Sorting logic\n    var sortingDirection = {}; // Track the sort direction for each column\n    var tableHeaders = document.querySelectorAll(\"#employee-table th\");\n    tableHeaders.forEach(function(header) {\n        header.addEventListener(\"click\", function() {\n            var column = header.getAttribute(\"data-column\");\n            var rows = Array.from(document.querySelectorAll(\"#employee-table tbody tr\"));\n            var isAscending = sortingDirection[column] !== \"asc\";\n            sortingDirection[column] = isAscending ? \"asc\" : \"desc\";\n            rows.sort(function(rowA, rowB) {\n                var cellA = rowA.querySelector(\"td:nth-child(\".concat(header.cellIndex + 1, \")\")).innerText;\n                var cellB = rowB.querySelector(\"td:nth-child(\".concat(header.cellIndex + 1, \")\")).innerText;\n                var valueA = isNaN(cellA) ? cellA : parseFloat(cellA);\n                var valueB = isNaN(cellB) ? cellB : parseFloat(cellB);\n                if (valueA < valueB) return isAscending ? -1 : 1;\n                if (valueA > valueB) return isAscending ? 1 : -1;\n                return 0;\n            });\n            var tbody = document.querySelector(\"#employee-table tbody\");\n            tbody.innerHTML = \"\";\n            rows.forEach(function(row) {\n                return tbody.appendChild(row);\n            });\n        });\n    });\n    // Row selection logic\n    var rows = document.querySelectorAll(\"#employee-table tbody tr\");\n    rows.forEach(function(row) {\n        row.addEventListener(\"click\", function() {\n            rows.forEach(function(r) {\n                return r.classList.remove(\"active\");\n            });\n            row.classList.add(\"active\");\n        });\n    });\n    // Form submission and validation\n    var form = document.querySelector(\".new-employee-form\");\n    form.addEventListener(\"submit\", function(event) {\n        event.preventDefault();\n        var formData = new FormData(form);\n        var name = formData.get(\"name\");\n        var position = formData.get(\"position\");\n        var office = formData.get(\"office\");\n        var age = parseInt(formData.get(\"age\"), 10);\n        var salary = parseFloat(formData.get(\"salary\"));\n        var errorMessage = \"\";\n        if (name.length < 4) errorMessage = \"Name must be at least 4 characters long.\";\n        else if (age < 18 || age > 90) errorMessage = \"Age must be between 18 and 90.\";\n        else if (isNaN(salary) || salary <= 0) errorMessage = \"Salary must be a positive number.\";\n        var notification = document.querySelector(\"#notification\");\n        var notificationTitle = document.querySelector(\"#notification-title\");\n        var notificationMessage = document.querySelector(\"#notification-message\");\n        if (errorMessage) {\n            notification.classList.remove(\"hidden\");\n            notification.classList.add(\"error\");\n            notificationTitle.textContent = \"Error\";\n            notificationMessage.textContent = errorMessage;\n        } else {\n            // Add new row to the table\n            var newRow = document.createElement(\"tr\");\n            newRow.innerHTML = \"\\n              <td>\".concat(name, \"</td>\\n              <td>\").concat(position, \"</td>\\n              <td>\").concat(office, \"</td>\\n              <td>\").concat(age, \"</td>\\n              <td>\").concat(salary, \"</td>\\n          \");\n            document.querySelector(\"#employee-table tbody\").appendChild(newRow);\n            notification.classList.remove(\"hidden\");\n            notification.classList.add(\"success\");\n            notificationTitle.textContent = \"Success\";\n            notificationMessage.textContent = \"Employee added successfully!\";\n            form.reset(); // Reset the form\n        }\n    });\n    // Cell editing logic (optional)\n    var editingCell = null;\n    var cells = document.querySelectorAll(\"#employee-table td\");\n    cells.forEach(function(cell) {\n        cell.addEventListener(\"dblclick\", function() {\n            if (editingCell) return;\n            var originalText = cell.innerText;\n            var input = document.createElement(\"input\");\n            input.value = originalText;\n            input.classList.add(\"cell-input\");\n            cell.innerHTML = \"\";\n            cell.appendChild(input);\n            input.focus();\n            input.addEventListener(\"blur\", function() {\n                saveCellChanges(cell, input.value, originalText);\n            });\n            input.addEventListener(\"keypress\", function(e) {\n                if (e.key === \"Enter\") saveCellChanges(cell, input.value, originalText);\n            });\n            editingCell = cell;\n        });\n    });\n});\n\n//# sourceMappingURL=index.a1af470b.js.map\n","/* eslint-disable no-param-reassign */\n/* eslint-disable no-shadow */\n'use strict';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Sorting logic\n  const sortingDirection = {}; // Track the sort direction for each column\n\n  const tableHeaders = document.querySelectorAll('#employee-table th');\n\n  tableHeaders.forEach((header) => {\n    header.addEventListener('click', () => {\n      const column = header.getAttribute('data-column');\n      const rows = Array.from(\n        document.querySelectorAll('#employee-table tbody tr'),\n      );\n      const isAscending = sortingDirection[column] !== 'asc';\n\n      sortingDirection[column] = isAscending ? 'asc' : 'desc';\n\n      rows.sort((rowA, rowB) => {\n        const cellA = rowA.querySelector(\n          `td:nth-child(${header.cellIndex + 1})`,\n        ).innerText;\n        const cellB = rowB.querySelector(\n          `td:nth-child(${header.cellIndex + 1})`,\n        ).innerText;\n\n        const valueA = isNaN(cellA) ? cellA : parseFloat(cellA);\n        const valueB = isNaN(cellB) ? cellB : parseFloat(cellB);\n\n        if (valueA < valueB) {\n          return isAscending ? -1 : 1;\n        }\n\n        if (valueA > valueB) {\n          return isAscending ? 1 : -1;\n        }\n\n        return 0;\n      });\n\n      const tbody = document.querySelector('#employee-table tbody');\n\n      tbody.innerHTML = '';\n      rows.forEach((row) => tbody.appendChild(row));\n    });\n  });\n\n  // Row selection logic\n  const rows = document.querySelectorAll('#employee-table tbody tr');\n\n  rows.forEach((row) => {\n    row.addEventListener('click', () => {\n      rows.forEach((r) => r.classList.remove('active'));\n      row.classList.add('active');\n    });\n  });\n\n  // Form submission and validation\n  const form = document.querySelector('.new-employee-form');\n\n  form.addEventListener('submit', (event) => {\n    event.preventDefault();\n\n    const formData = new FormData(form);\n    const name = formData.get('name');\n    const position = formData.get('position');\n    const office = formData.get('office');\n    const age = parseInt(formData.get('age'), 10);\n    const salary = parseFloat(formData.get('salary'));\n\n    let errorMessage = '';\n\n    if (name.length < 4) {\n      errorMessage = 'Name must be at least 4 characters long.';\n    } else if (age < 18 || age > 90) {\n      errorMessage = 'Age must be between 18 and 90.';\n    } else if (isNaN(salary) || salary <= 0) {\n      errorMessage = 'Salary must be a positive number.';\n    }\n\n    const notification = document.querySelector('#notification');\n    const notificationTitle = document.querySelector('#notification-title');\n    const notificationMessage = document.querySelector('#notification-message');\n\n    if (errorMessage) {\n      notification.classList.remove('hidden');\n      notification.classList.add('error');\n      notificationTitle.textContent = 'Error';\n      notificationMessage.textContent = errorMessage;\n    } else {\n      // Add new row to the table\n      const newRow = document.createElement('tr');\n\n      newRow.innerHTML = `\n              <td>${name}</td>\n              <td>${position}</td>\n              <td>${office}</td>\n              <td>${age}</td>\n              <td>${salary}</td>\n          `;\n      document.querySelector('#employee-table tbody').appendChild(newRow);\n\n      notification.classList.remove('hidden');\n      notification.classList.add('success');\n      notificationTitle.textContent = 'Success';\n      notificationMessage.textContent = 'Employee added successfully!';\n\n      form.reset(); // Reset the form\n    }\n  });\n\n  // Cell editing logic (optional)\n  let editingCell = null;\n\n  const cells = document.querySelectorAll('#employee-table td');\n\n  cells.forEach((cell) => {\n    cell.addEventListener('dblclick', () => {\n      if (editingCell) {\n        return;\n      }\n\n      const originalText = cell.innerText;\n      const input = document.createElement('input');\n\n      input.value = originalText;\n      input.classList.add('cell-input');\n\n      cell.innerHTML = '';\n      cell.appendChild(input);\n      input.focus();\n\n      input.addEventListener('blur', () => {\n        saveCellChanges(cell, input.value, originalText);\n      });\n\n      input.addEventListener('keypress', (e) => {\n        if (e.key === 'Enter') {\n          saveCellChanges(cell, input.value, originalText);\n        }\n      });\n\n      editingCell = cell;\n    });\n  });\n\n  function saveCellChanges(cell, newValue, originalValue) {\n    if (newValue.trim() === '') {\n      newValue = originalValue;\n    }\n    cell.innerText = newValue;\n    editingCell = null;\n  }\n});\n"],"names":["document","addEventListener","saveCellChanges","cell","newValue","originalValue","trim","innerText","editingCell","sortingDirection","tableHeaders","querySelectorAll","forEach","header","column","getAttribute","rows","Array","from","isAscending","sort","rowA","rowB","cellA","querySelector","concat","cellIndex","cellB","valueA","isNaN","parseFloat","valueB","tbody","innerHTML","row","appendChild","r","classList","remove","add","form","event","preventDefault","formData","FormData","name","get","position","office","age","parseInt","salary","errorMessage","length","notification","notificationTitle","notificationMessage","textContent","newRow","createElement","reset","cells","originalText","input","value","focus","e","key"],"version":3,"file":"index.a1af470b.js.map"}